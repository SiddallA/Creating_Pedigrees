library(tidyverse)
Apodemus_data <- read_tsv("Alex_samples_Poland.tsv")

#Get rid of the duplicates

head(Apodemus_data, -4) -> Apodemus_data

#Create ID which matches the ID on sequencing 

Apodemus_data$`Digestion plate` <- paste(Apodemus_data$`Digestion plate`,Apodemus_data$X23)

gsub(" ", "0", Apodemus_data$`Digestion plate`, fixed = TRUE) -> Apodemus_data$ID
gsub("011", "11", Apodemus_data$ID, fixed = TRUE) -> Apodemus_data$ID
gsub("012", "12", Apodemus_data$ID, fixed = TRUE) -> Apodemus_data$ID
gsub("010", "10", Apodemus_data$ID, fixed = TRUE) -> Apodemus_data$ID


```

```{r}
#Select info needed

Apodemus_data %>% select(Sex, Place, Date, `Age (juv - juvenile, sad - sudadultus, ad - adultus)`, ID) -> apofilt

#Candidate offspring ID

apofilt %>% select(Sex, ID) -> offspring
write.csv(can_father_no_age_fil, row.names = FALSE, file = "Apo_ID_sex_off.csv")

#Candidate fathers only (none age accounted)

can_father_no_age <- apofilt[grep("\\bmale\\b", apofilt$Sex), ]
can_father_no_age %>% select(Sex, ID) -> can_father_no_age_fil
write.csv(can_father_no_age_fil, row.names = FALSE, file = "Apo_ID_sex_par_father.csv")

#Candidate fathers only (none age accounted)

can_mother_no_age <- apofilt[grep("\\bfemale\\b", apofilt$Sex), ]
can_mother_no_age %>% select(Sex, ID) -> can_mother_no_age_fil
write.csv(can_mother_no_age_fil, row.names = FALSE, file = "Apo_ID_sex_par_mother.csv")

#Group by age

apofilt %>% group_by(`Age (juv - juvenile, sad - sudadultus, ad - adultus)`)

#Order by age

apofilt <- apofilt[order(apofilt$`Age (juv - juvenile, sad - sudadultus, ad - adultus)`),]

#Filter out only adults and sudadultus

apo_no_juv <- apofilt[!grepl("\\juv\\b", apofilt$`Age (juv - juvenile, sad - sudadultus, ad - adultus)`), ]

#Filter out only adults

apo_adults <- apo_no_juv[!grepl("sad", apo_no_juv$`Age (juv - juvenile, sad - sudadultus, ad - adultus)`), ]

#Select only juviniles

apo_juv <- apofilt[grep("juv", apofilt$`Age (juv - juvenile, sad - sudadultus, ad - adultus)`), ]

#Select only sudaldutus

apo_sad <- apofilt[grep("sad", apofilt$`Age (juv - juvenile, sad - sudadultus, ad - adultus)`), ]

#Select only mothers

apo_no_juv_female <- apo_no_juv[grep("female", apo_no_juv$Sex), ]

#Select the ID of candiates mothers

apo_no_juv_ID_mother <- apo_no_juv_female[, 5]

#Flip data so it can be pasted as a row

apo_no_juv_flipped_mother <- t(apo_no_juv_ID_mother)

#Select only fathers

apo_no_juv_male <- apo_no_juv[grep("\\bmale\\b", apo_no_juv$Sex), ]

#Select candidate father IDs

apo_no_juv_ID_father <- apo_no_juv_male[, 5]

#Flip data so can be pasted as row

apo_no_juv_flipped_father <- t(apo_no_juv_ID_father)

#Adults only candidate mothers

apo_adults_female <- apo_adults[grep("female", apo_adults$Sex), ]

apo_adults_ID_mother <- apo_adults_female[, 5]

apo_adults_flipped_mother <- t(apo_adults_ID_mother)

#Adults only candidate fathers

apo_adults_male <- apo_adults[grep("\\bmale\\b", apo_adults$Sex), ]

apo_adults_ID_father <- apo_adults_male[, 5]

apo_adults_flipped_father <- t(apo_adults_ID_father)

#Create only IDs by age

apo_adults_ID <- apo_adults[, 5]
apo_sad_ID <- apo_sad[, 5]
apo_juv_ID <- apo_juv[, 5]

#Bind the appropiate age groups to the correct age groups

apo_adults_bound_mother <- cbind(apo_adults_ID, apo_adults_flipped_mother)
apo_adults_bound_father <- cbind(apo_adults_ID, apo_adults_flipped_father)

apo_juv_bound_mother <- cbind(apo_juv_ID, apo_no_juv_flipped_mother)
apo_juv_bound_father <- cbind(apo_juv_ID, apo_no_juv_flipped_father)

apo_sad_bound_mother <- cbind(apo_sad_ID, apo_adults_flipped_mother)
apo_sad_bound_father <- cbind(apo_sad_ID, apo_adults_flipped_father)

#Output the data for cervus

write.csv(apo_adults_bound_mother, row.names = FALSE , file = "apo_adults_bound_mother.csv")
write.csv(apo_adults_bound_father,row.names = FALSE , file = "apo_adults_bound_father.csv")

write.csv(apo_juv_bound_mother, row.names = FALSE , file = "apo_juv_bound_mother.csv")
write.csv(apo_juv_bound_father, row.names = FALSE , file = "apo_juv_bound_father.csv")

write.csv(apo_sad_bound_mother, row.names = FALSE, file = "apo_sad_bound_mother.csv")
write.csv(apo_sad_bound_father, row.names = FALSE,  file = "apo_sad_bound_father.csv")

# Outputted file were merged in excel to create a single candidate mother and single candidate father file
